class StateRecorder --Class responsible for recording state of the model

instance variables
    public env_q : real; --sensor angle read
    public env_q_vel : real; -- sensor angle read
    public env_q_acc : real; -- sensor angle read
    public env_torque : real; -- sensor angle read
    public ctl_q : real; -- sensor angle read
    public ctl_q_vel : real; -- sensor angle read
    public ctl_torque : real; -- sensor angle read

    
    public s : seq of (seq of char);

operations
    public StateRecorder: () ==> StateRecorder
    StateRecorder() == (
        env_q := 0;
        env_q_vel := 0;
        env_q_acc := 0;
        env_torque := 0;
        ctl_q := 0;
        ctl_q_vel := 0;
        ctl_torque := 0;

        
        s := ["","","","",""];
        s(1) := s(1) ^ "Current Real time of the Simulation: ";
        s(2) := s(2) ^ "Env q: ";
        s(3) := s(3) ^ "Env q vel: ";
        s(4) := s(4) ^ "Ctl q: ";
        s(5) := s(5) ^ "Ctl q vel: ";
    );
   
    public CtlUpdate: (seq of real) ==> ()
    CtlUpdate(vals) == duration(0) (
        ctl_q := vals(1);
        ctl_q_vel := vals(2);
        ctl_torque := vals(3);
    );

    public rec2: () ==> ()
    rec2() == duration(0) (
        env_q := MySystem`arm.GetCurrentPosition();
        env_q_vel := MySystem`arm.GetVelocity();
        env_q_acc := MySystem`arm.GetCurrentAcceleration();
        env_torque := MySystem`arm.GetCurrentMotorTorque();

        s(1) := s(1) ^ VDMUtil`val2seq_of_char[real](time / 1E9) ^", ";
        s(2) := s(2) ^ VDMUtil`val2seq_of_char[real](env_q)^", ";
        s(3) := s(3) ^ VDMUtil`val2seq_of_char[real](env_q_vel)^", ";
        s(4) := s(4) ^ VDMUtil`val2seq_of_char[real](ctl_q)^", ";
        s(5) := s(5) ^ VDMUtil`val2seq_of_char[real](ctl_q_vel)^", ";

    );
        
thread
    periodic(1E9, 0, 0, 0)(rec2); -- calling each second

sync
    mutex(CtlUpdate,rec2);

end StateRecorder