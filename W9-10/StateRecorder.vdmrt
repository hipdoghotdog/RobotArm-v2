class StateRecorder

instance variables
    public env_q : real; --sensor angle read
    public env_q_vel : real; -- sensor angle read
    public env_q_acc : real; -- sensor angle read
    public env_torque : real; -- sensor angle read
    public ctl_q : real; -- sensor angle read
    public ctl_q_vel : real; -- sensor angle read
    public ctl_torque : real; -- sensor angle read

    public str : seq of char;

operations
    public StateRecorder: () ==> StateRecorder
    StateRecorder() == (
        env_q := 0;
        env_q_vel := 0;
        env_q_acc := 0;
        env_torque := 0;
        ctl_q := 0;
        ctl_q_vel := 0;
        ctl_torque := 0;

        str := "";
    );

    public CtlUpdate: (seq of real) ==> ()
    CtlUpdate(vals) == duration(0) (
        ctl_q := vals(1);
        ctl_q_vel := vals(2);
        ctl_torque := vals(3);
    );
    public rec: () ==> ()
    rec() == duration(0) (
        env_q := MySystem`arm.GetCurrentPosition();
        env_q_vel := MySystem`arm.GetVelocity();
        env_q_acc := MySystem`arm.GetCurrentAcceleration();
        env_torque := MySystem`arm.GetCurrentMotorTorque();
        
        str := str ^ "\nCurrent Real time of the Simulation: ";
        str := str ^ VDMUtil`val2seq_of_char[real](time / 1E9);
        str := str ^ "\nEnv q: ";
        str := str ^ VDMUtil`val2seq_of_char[real](env_q);
        str := str ^ "\nEnv q vel: ";
        str := str ^ VDMUtil`val2seq_of_char[real](env_q_vel);
        --str := str ^ "\nEnv q acc: ";
        --str := str ^ VDMUtil`val2seq_of_char[real](env_q_acc);
        --str := str ^ "\nEnv motor torque: ";
        --str := str ^ VDMUtil`val2seq_of_char[real](env_torque);
        str := str ^ "\nCtl q: ";
        str := str ^ VDMUtil`val2seq_of_char[real](ctl_q);
        str := str ^ "\nCtl q vel: ";
        str := str ^ VDMUtil`val2seq_of_char[real](ctl_q_vel);
        --str := str ^ "\nCtl motor torque: ";
        --str := str ^ VDMUtil`val2seq_of_char[real](ctl_torque);

    );
        
thread
    periodic(1E9, 0, 0, 0)(rec); -- calling each second

sync
    mutex(CtlUpdate,rec);

end StateRecorder