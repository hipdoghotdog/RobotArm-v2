class RobotArm

types
    public Angle = real inv N == N >= -0.2 and N <= 1.8; -- max angles for the arm

    public Event = <MotorFailure> | <SensorFailure> | <MotorRepair> | <SensorRepair>;

values 
    public r: real = 0.8; -- arm length
        public I: real = 2 * r * r; -- inertia

instance variables
    public env_q : real; -- angle of joint. radians
    public env_q_vel: real; -- velocity. rad/s
    public env_q_acc: real; -- acceleration. rad/s^2
    public env_motorTorque: real; -- motor torque in Nm
    public last_time: real;

    --simulation time
    public final_sim_time: real;
    public data_history: seq of (seq of char*real);
    public str: seq of char;
    public events: seq of (real * Event * real);

operations
    public RobotArm: () ==> RobotArm
    RobotArm() == (
        env_q := 0;
        env_q_vel := 0; 
        env_q_acc := 0; 
        env_motorTorque := 0;

        last_time := 0;
        final_sim_time := 0;
        data_history := [];
        str:= "";
        events := [];
    );

    public recordState : () ==> ()
    recordState() == duration(0) (
        data_history:= data_history ^ [mk_("Timestamp", time / 1E9)];
        data_history:= data_history ^ [mk_("Env q", env_q)];
        data_history:= data_history ^ [mk_("Env q vel", env_q_vel)];
        data_history:= data_history ^ [mk_("Env q acc", env_q_acc)];
    );
    public rec: () ==> ()
    rec() == duration(0) (
        
        str := str ^ "\nCurrent Real time of the Simulation: ";
        str := str ^ VDMUtil`val2seq_of_char[real](time / 1E9);
        str := str ^ "\nEnv q: ";
        str := str ^ VDMUtil`val2seq_of_char[real](env_q);
        str := str ^ "\nEnv q vel: ";
        str := str ^ VDMUtil`val2seq_of_char[real](env_q_vel);
        str := str ^ "\nEnv q acc: ";
        str := str ^ VDMUtil`val2seq_of_char[real](env_q_acc);
    );

    -- Motor actuator
    public GetMotorTorque: real ==> ()
    GetMotorTorque(torque) == duration(0) (
        env_motorTorque := torque;
    );
    public GetCurrentMotorTorque: () ==> real
    GetCurrentMotorTorque() == duration(0) (
        return env_motorTorque;
    );

    -- Angle sensor
    public GetCurrentPosition: () ==> real
    GetCurrentPosition() == duration(0) (
        return env_q;
    );

    public SetCurrentPosition: real ==> ()
    SetCurrentPosition(pos) == duration(0) (
        env_q := pos;
    );

    -- Movement Sensor (velocity and acceleration)
    public GetVelocity: () ==> real
    GetVelocity() == (
        return env_q_vel;
    );

    public GetCurrentAcceleration: () ==> real
    GetCurrentAcceleration() == (
        return env_q_acc;
    );

    public set_sim_time: real ==> ()
    set_sim_time(t) == duration(0) (
        final_sim_time := t;
    );

    public isFinished: () ==> ()
    isFinished() == skip;

    -- step function
    public Step: () ==> ()
    Step() == duration(0) (
            dcl t : real := time / 1E9;
            dcl delta : real := (t - last_time);
            CreateEvent();
            last_time := t;

            -- Update movement values
            env_q_acc := env_motorTorque / I; -- Assuming uniform mass distribution arm length meter. a = t / i
            env_q_vel := env_q_vel + env_q_acc * delta;
            env_q := env_q + env_q_vel * delta;
            --rec();

            -- For demonstrative purposes when reaching max limit angles!!
            if env_q < -0.2 then 
                (env_q := -0.2;
                env_q_acc := 0;
                env_q_vel := 0;);
            if env_q > 1.8 then 
                (env_q := 1.8;
                env_q_acc := 0;
                env_q_vel := 0;);
    );

    public AddEvent : real * Event * real ==> ()
    AddEvent (t, e, d) == duration(0) (
        events := events ^ [mk_(t,e,d)];
    );

    public CreateEvent : () ==> ()
    CreateEvent() == duration(0) (
        if len events > 0 then (
            let mk_(stime,event,event_data) = hd events
            in if stime <= time then (
                if (event = <MotorFailure>) then (
                    MySystem`motorActuator.MotorFailure();
                ) elseif (event = <MotorRepair>) then (
                    MySystem`motorActuator.MotorRepair();
                ) elseif (event = <SensorFailure>) then (
                    MySystem`angleSensor.SensorFailure();
                ) elseif (event = <SensorRepair>) then (
                    MySystem`angleSensor.SensorRepair();
                );
                events := tl events;
            )
            
        )
    );

thread
    periodic(1E9,0,0,0)(Step);

sync
    mutex (GetCurrentPosition);
    mutex (GetMotorTorque);

    per isFinished => (time > final_sim_time);
    

end RobotArm
