class MotorActuator
    types
        public MotorState = <Working> | <Failure>;
    instance variables
        public act_motorTorque : real;
        public motor_state : MotorState;


    operations 
        public MotorActuator: () ==> MotorActuator
        MotorActuator() == (
            act_motorTorque := 0;
            motor_state := <Working>;
        );

        public GetMotorTorque: () ==> ()
        GetMotorTorque() == duration(1E8) (
            act_motorTorque := MySystem`controller.GetCurrentMotorTorque();
        );

        public MotorFailure: () ==> ()
        MotorFailure() == duration(0) (
            motor_state := <Failure>;
        );
        public MotorRepair: () ==> ()
        MotorRepair() == duration(0) (
            motor_state := <Working>;
        );

        public UpdateMotorTorque: () ==> ()
        UpdateMotorTorque() == duration(1E8) (
            GetMotorTorque();
            if (motor_state = <Working>) then (
                MySystem`arm.GetMotorTorque(act_motorTorque);
            ) else MySystem`arm.GetMotorTorque(0);
            
        );

    thread
        periodic(1E9, 0, 0, 0)(UpdateMotorTorque) -- calling each seonc
      
    sync
        mutex(GetMotorTorque)


end MotorActuator